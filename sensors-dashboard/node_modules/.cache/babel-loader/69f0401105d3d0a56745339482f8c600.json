{"ast":null,"code":"import _classCallCheck from \"/Users/Farhad/Desktop/socket/sensors-dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/Farhad/Desktop/socket/sensors-dashboard/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Farhad/Desktop/socket/sensors-dashboard/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Farhad/Desktop/socket/sensors-dashboard/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Farhad/Desktop/socket/sensors-dashboard/src/Dashboard.js\";\nimport React, { Component } from 'react';\nimport { Progress, Container, Row } from \"reactstrap\";\nimport axios from 'axios';\nimport openSocket from \"socket.io-client\";\nvar io = openSocket('http://localhost:5000');\nvar i = 0;\n\nvar Dashboard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dashboard, _Component);\n\n  function Dashboard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dashboard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dashboard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      sensors: [],\n      sensorData: {}\n    };\n\n    _this.componentDidMount = function () {// this.getSensors()\n      // setInterval(_ => {\n      //     io.emit('sensors_data')\n      //     i++;\n      // }, 1000)\n      // io.on('data', sensorDataJson => {\n      //     var sensorData = sensorDataJson ? JSON.parse(sensorDataJson) : {}\n      //     this.setState({ sensorData })\n      // })\n    };\n\n    _this.getSensors = function () {\n      axios.get('http://0.0.0.0:5000/sensors').then(function (res) {\n        var sensors = [];\n\n        for (var sensorKey in JSON.parse(res.data.sensors)) {\n          sensors.push(JSON.parse(res.data.sensors)[sensorKey]);\n        }\n\n        _this.setState({\n          sensors: sensors\n        });\n\n        console.log(sensors);\n      });\n    };\n\n    _this.render = function () {\n      return React.createElement(\"div\", {\n        className: \"m-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"d-flex align-items-center justify-content-center mt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Sensors dashboard\")), React.createElement(Container, {\n        style: {\n          marginTop: 50\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, _this.state.sensors.map(function (sensor) {\n        return React.createElement(Row, {\n          className: \"d-flex align-items-center mt-5\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, React.createElement(\"h5\", {\n          style: {\n            width: 100\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, sensor.name), React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, _this.state.sensorData[sensor.name] && _this.state.sensorData[sensor.name]['value'].toString()));\n      })));\n    };\n\n    return _this;\n  }\n\n  return Dashboard;\n}(Component);\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/Farhad/Desktop/socket/sensors-dashboard/src/Dashboard.js"],"names":["React","Component","Progress","Container","Row","axios","openSocket","io","i","Dashboard","state","sensors","sensorData","componentDidMount","getSensors","get","then","res","sensorKey","JSON","parse","data","push","setState","console","log","render","marginTop","map","sensor","width","name","toString"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACIC,QADJ,EAEIC,SAFJ,EAGIC,GAHJ,QAKO,YALP;AAMA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,IAAMC,EAAE,GAAGD,UAAU,CAAC,uBAAD,CAArB;AAEA,IAAIE,CAAC,GAAG,CAAR;;IACMC,S;;;;;;;;;;;;;;;;;UAEFC,K,GAAQ;AACJC,MAAAA,OAAO,EAAE,EADL;AAEJC,MAAAA,UAAU,EAAE;AAFR,K;;UAKRC,iB,GAAoB,YAAM,CACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,K;;UAEDC,U,GAAa,YAAM;AACfT,MAAAA,KAAK,CAACU,GAAN,CAAU,6BAAV,EACKC,IADL,CAEQ,UAAAC,GAAG,EAAI;AACH,YAAIN,OAAO,GAAG,EAAd;;AACA,aAAK,IAAIO,SAAT,IAAsBC,IAAI,CAACC,KAAL,CAAWH,GAAG,CAACI,IAAJ,CAASV,OAApB,CAAtB,EAAoD;AAChDA,UAAAA,OAAO,CAACW,IAAR,CAAaH,IAAI,CAACC,KAAL,CAAWH,GAAG,CAACI,IAAJ,CAASV,OAApB,EAA6BO,SAA7B,CAAb;AACH;;AACD,cAAKK,QAAL,CAAc;AAAEZ,UAAAA,OAAO,EAAPA;AAAF,SAAd;;AACAa,QAAAA,OAAO,CAACC,GAAR,CAAYd,OAAZ;AACH,OATT;AAWH,K;;UAEDe,M,GAAS,YAAM;AACX,aACI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,uDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,CADJ,EAII,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,MAAKjB,KAAL,CAAWC,OAAX,CAAmBiB,GAAnB,CAAuB,UAAAC,MAAM;AAAA,eAC1B,oBAAC,GAAD;AAAK,UAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAI,UAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA4BD,MAAM,CAACE,IAAnC,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAK,MAAKrB,KAAL,CAAWE,UAAX,CAAsBiB,MAAM,CAACE,IAA7B,KAAsC,MAAKrB,KAAL,CAAWE,UAAX,CAAsBiB,MAAM,CAACE,IAA7B,EAAmC,OAAnC,EAA4CC,QAA5C,EAA3C,CAFJ,CAD0B;AAAA,OAA7B,CADL,CAJJ,CADJ;AAkBH,K;;;;;;EApDmB/B,S;;AAuDxB,eAAeQ,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Progress,\n    Container,\n    Row,\n\n} from \"reactstrap\";\nimport axios from 'axios';\nimport openSocket from \"socket.io-client\";\nconst io = openSocket('http://localhost:5000')\n\nvar i = 0\nclass Dashboard extends Component {\n\n    state = {\n        sensors: [],\n        sensorData: {},\n    }\n\n    componentDidMount = () => {\n        // this.getSensors()\n        // setInterval(_ => {\n        //     io.emit('sensors_data')\n        //     i++;\n        // }, 1000)\n        // io.on('data', sensorDataJson => {\n        //     var sensorData = sensorDataJson ? JSON.parse(sensorDataJson) : {}\n        //     this.setState({ sensorData })\n        // })\n    }\n\n    getSensors = () => {\n        axios.get('http://0.0.0.0:5000/sensors')\n            .then(\n                res => {\n                    var sensors = []\n                    for (var sensorKey in JSON.parse(res.data.sensors)) {\n                        sensors.push(JSON.parse(res.data.sensors)[sensorKey])\n                    }\n                    this.setState({ sensors })\n                    console.log(sensors)\n                }\n            )\n    }\n\n    render = () => {\n        return (\n            <div className='m-5'>\n                <div className='d-flex align-items-center justify-content-center mt-2'>\n                    <h1>Sensors dashboard</h1>\n                </div>\n                <Container style={{ marginTop: 50 }}>\n                    {this.state.sensors.map(sensor => (\n                        <Row className='d-flex align-items-center mt-5'>\n                            <h5 style={{ width: 100 }}>{sensor.name}</h5>\n                            <h2>{this.state.sensorData[sensor.name] && this.state.sensorData[sensor.name]['value'].toString()}</h2>\n                        </Row>\n                    ))}\n\n                </Container>\n\n            </div>\n\n        )\n    }\n}\n\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}