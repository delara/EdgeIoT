{"ast":null,"code":"import _classCallCheck from \"/Users/Farhad/Desktop/socket/sensors-dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Farhad/Desktop/socket/sensors-dashboard/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Farhad/Desktop/socket/sensors-dashboard/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Farhad/Desktop/socket/sensors-dashboard/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Farhad/Desktop/socket/sensors-dashboard/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Farhad/Desktop/socket/sensors-dashboard/src/App.js\";\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport openSocket from \"socket.io-client\";\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport \"react-tabs/style/react-tabs.css\";\nimport Dashboard from './Dashboard';\nimport Settings from './Settings';\nvar io = openSocket('http://localhost:5000');\nvar i = 0;\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      showUrl: false,\n      url: '',\n      send_data: false,\n      airQaulity: 0,\n      motion: false,\n      sound: 0,\n      moister: 0\n    };\n\n    _this.componentDidMount = function () {\n      setInterval(function (_) {\n        io.emit('sensors_data');\n        i++;\n      }, 10); // io.on('air_quality_value', airQualityValue => this.setState({  }))\n      // io.on('motion_value', motionValue => this.setState({ }))\n\n      io.on('data', function (sensorDataJson) {\n        var sensorData = sensorDataJson ? JSON.parse(sensorDataJson) : {};\n\n        _this.setState({\n          sound: sensorData.sound && sensorData.sound.value > 50 ? sensorData.sound && sensorData.sound.value / 2.5 - 50 : 10\n        }); // , airQaulity: sensorData.air_quality / 10, motion: sensorData.motion > 500, moister: (1000 - sensorData.dust) / 10 })\n\n\n        console.log(sensorDataJson);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Tabs, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(TabList, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(Tab, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Dashboard\"), React.createElement(Tab, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Setup\")), React.createElement(TabPanel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(Dashboard, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      })), React.createElement(TabPanel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(Settings, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/Farhad/Desktop/socket/sensors-dashboard/src/App.js"],"names":["React","Component","openSocket","Tab","Tabs","TabList","TabPanel","Dashboard","Settings","io","i","App","state","showUrl","url","send_data","airQaulity","motion","sound","moister","componentDidMount","setInterval","_","emit","on","sensorDataJson","sensorData","JSON","parse","setState","value","console","log"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,sCAAP;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,YAA7C;AACA,OAAO,iCAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,IAAMC,EAAE,GAAGP,UAAU,CAAC,uBAAD,CAArB;AACA,IAAIQ,CAAC,GAAG,CAAR;;IACMC,G;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNC,MAAAA,OAAO,EAAE,KADH;AAENC,MAAAA,GAAG,EAAE,EAFC;AAGNC,MAAAA,SAAS,EAAE,KAHL;AAINC,MAAAA,UAAU,EAAE,CAJN;AAKNC,MAAAA,MAAM,EAAE,KALF;AAMNC,MAAAA,KAAK,EAAE,CAND;AAONC,MAAAA,OAAO,EAAE;AAPH,K;;UAURC,iB,GAAoB,YAAM;AACxBC,MAAAA,WAAW,CAAC,UAAAC,CAAC,EAAI;AACfb,QAAAA,EAAE,CAACc,IAAH,CAAQ,cAAR;AACAb,QAAAA,CAAC;AACF,OAHU,EAGR,EAHQ,CAAX,CADwB,CAKxB;AACA;;AACAD,MAAAA,EAAE,CAACe,EAAH,CAAM,MAAN,EAAc,UAAAC,cAAc,EAAI;AAC9B,YAAIC,UAAU,GAAGD,cAAc,GAAGE,IAAI,CAACC,KAAL,CAAWH,cAAX,CAAH,GAAgC,EAA/D;;AACA,cAAKI,QAAL,CAAc;AAAEX,UAAAA,KAAK,EAAGQ,UAAU,CAACR,KAAX,IAAoBQ,UAAU,CAACR,KAAX,CAAiBY,KAAjB,GAAyB,EAA9C,GAAqDJ,UAAU,CAACR,KAAX,IAAoBQ,UAAU,CAACR,KAAX,CAAiBY,KAAjB,GAAyB,GAAzB,GAA+B,EAAxG,GAA8G;AAAvH,SAAd,EAF8B,CAG9B;;;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYP,cAAZ;AACD,OALD;AAOD,K;;;;;;;6BAEQ;AACP,aAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,CADF,EAME,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CANF,EASE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CATF,CAFF;AAiBD;;;;EA9CexB,S;;AAkDlB,eAAeU,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport openSocket from \"socket.io-client\";\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport \"react-tabs/style/react-tabs.css\";\nimport Dashboard from './Dashboard';\nimport Settings from './Settings';\n\nconst io = openSocket('http://localhost:5000')\nvar i = 0\nclass App extends Component {\n\n  state = {\n    showUrl: false,\n    url: '',\n    send_data: false,\n    airQaulity: 0,\n    motion: false,\n    sound: 0,\n    moister: 0\n  }\n\n  componentDidMount = () => {\n    setInterval(_ => {\n      io.emit('sensors_data')\n      i++;\n    }, 10)\n    // io.on('air_quality_value', airQualityValue => this.setState({  }))\n    // io.on('motion_value', motionValue => this.setState({ }))\n    io.on('data', sensorDataJson => {\n      var sensorData = sensorDataJson ? JSON.parse(sensorDataJson) : {}\n      this.setState({ sound: (sensorData.sound && sensorData.sound.value > 50) ? (sensorData.sound && sensorData.sound.value / 2.5 - 50) : 10 })\n      // , airQaulity: sensorData.air_quality / 10, motion: sensorData.motion > 500, moister: (1000 - sensorData.dust) / 10 })\n      console.log(sensorDataJson)\n    })\n\n  }\n\n  render() {\n    return (\n\n      <Tabs>\n        <TabList>\n          <Tab>Dashboard</Tab>\n          <Tab>Setup</Tab>\n        </TabList>\n\n        <TabPanel>\n          <Dashboard />\n        </TabPanel>\n        <TabPanel>\n          <Settings />\n        </TabPanel>\n      </Tabs>\n\n    );\n  }\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}